[[plugins]]
repo = 'Shougo/vinarise'
on_cmd = 'Vinarise'

[[plugins]]
repo = 'airblade/vim-rooter'
on_cmd = ['Rooter', 'RooterToggle']
hook_add = '''
let g:rooter_change_directory_for_non_project_files = 'current'
let g:rooter_manual_only = 1
let g:rooter_cd_cmd="lcd"
'''

[[plugins]]
repo = 'preservim/tagbar'
hook_source = '''
let g:tagbar_width = 40
nnoremap <silent> <leader>t :TagbarToggle<CR>
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_post_update = ':UpdateRemotePlugins'
hook_source = '''
let g:deoplete#enable_at_startup = 1

" <C-c>: popup cancel
inoremap <expr><C-c> deoplete#cancel_popup()

call deoplete#custom#option('candidate_marks', ['A', 'S', 'D', 'F', 'G'])
inoremap <expr><C-a> pumvisible() ? deoplete#insert_candidate(0) : 'A'
inoremap <expr><C-s> pumvisible() ? deoplete#insert_candidate(1) : 'S'
inoremap <expr><C-d> pumvisible() ? deoplete#insert_candidate(2) : 'D'
inoremap <expr><C-f> pumvisible() ? deoplete#insert_candidate(3) : 'F'
inoremap <expr><C-g> pumvisible() ? deoplete#insert_candidate(4) : 'G'

call deoplete#custom#source('_', 'matchers', ['matcher_fuzzy'])
call deoplete#custom#source('_', 'converters', [
          \ 'converter_remove_paren',
          \ 'converter_remove_overlap',
          \ 'matcher_length',
          \ 'converter_truncate_abbr',
          \ 'converter_truncate_menu',
          \ 'converter_auto_delimiter',
          \ ])

call deoplete#custom#option('keyword_patterns', {
		\ '_': '[a-zA-Z_]\k*',
		\ 'tex': '\\?[a-zA-Z_]\w*',
		\ 'ruby': '[a-zA-Z_]\w*[!?]?',
		\})
'''

[[plugins]]
repo = 'Shougo/deoplete-clangx'
on_ft = 'cpp'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'vim-scripts/sh.vim--Cla'
on_ft = 'sh'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'stephpy/vim-php-cs-fixer'
on_ft = 'php'
on_source = '''
let g:php_cs_fixer_level = "symfony"
let g:php_cs_fixer_config = "default"

let g:php_cs_fixer_rules = "@Symfony"
let g:php_cs_fixer_cache = ".php_cs.cache"

let g:php_cs_fixer_php_path = "php"
let g:php_cs_fixer_enable_default_mapping = 0
let g:php_cs_fixer_dry_run = 1
let g:php_cs_fixer_verbose = 1

nnoremap <silent><leader>pcd :call PhpCsFixerFixDirectory()<CR>
nnoremap <silent><leader>pcf :call PhpCsFixerFixFile()<CR>
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'
hook_add = '''
autocmd FileType vue syntax sync fromstart
'''

[[plugins]]
repo = 'deoplete-plugins/deoplete-go'
build= 'make'
if   = '''has('python3')'''
on_ft = 'go'
hook_post_update = '''
GoInstallBinaries
'''
hook_add = '''
let g:deoplete#sources#go#gocode_binary = '~/go/bin/gocode'
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'
if   = '''has('python3')'''
on_ft = 'rust'
hook_add = '''
let g:deoplete#sources#rust#racer_binary = '/home/cookies/.cargo/bin/racer'
let g:deoplete#sources#rust#rust_source_path = '/home/cookies/.vim/rust/rust/src'
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add = '''
let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'nvie/vim-flake8'
on_ft = 'python'


[[plugins]]
repo = 'jvirtanen/vim-octave'
on_ft = ['octave', 'matlab']

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
if   = '''has('python3')'''
build = 'sh install.sh'
on_ft = ['rust', 'ruby', 'python']
hook_source = '''
let g:LanguageClient_serverCommands = {
            \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
            \ 'ruby': ['solargraph', 'stdio'],
            \ 'python': ['pyls'],
            \}
let g:LanguageClient_autoStart = 1
nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
'''

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'mhartington/nvim-typescript'
on_ft = ['typescript']
build = './install.sh'
depends = 'yats.vim'

[[plugins]]
repo = 'vim-syntastic/syntastic'
on_ft = ['php', 'ocaml']
hook_add = '''
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs = 1
let g:syntastic_echo_current_error = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_enable_highlighting = 1
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_mode_map = {
            \ 'mode': 'active',
            \ 'active_filetypes': ['php']
            \}
let g:syntastic_php_checkers = ['phpcs']
let g:syntastic_php_phpcs_args = '--standard=psr2'
'''

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
on_ft = 'cpp'

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['tf', 'hcl']

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_post_source = '''
command Gpr ! gh pr create -w
autocmd VimEnter * if empty(expand('<amatch>'))|call FugitiveDetect(getcwd())|endif
'''

[[plugins]]
repo = 'junegunn/gv.vim'
depends = ['vim-fugitive']

[[plugins]]
repo = 'sodapopcan/vim-twiggy'
depends = ['vim-fugitive']

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_source = '''
let g:quickrun_config = {
            \ '_' : {
            \   'runner' : 'vimproc',
            \   'runner/vimproc/updatetime' : 60,
            \   'outputter' : 'error',
            \   'outputter/error/success' : 'buffer',
            \   'outputter/error/error' : 'quickfix',
            \   'outputter/buffer/split' : 'rightbelow 8',
            \   'outputter/buffer/close_on_empty' : 1,
            \ },
            \ 'tex' : {
            \   'command' : 'latexmk',
            \   'outputter' : 'error',
            \   'outputter/error/success' : 'null',
            \   'outputter/error/error' : 'quickfix',
            \   'srcfile' : expand("%"),
            \   'hook/sweep/files' : [
            \       '%S:p:r.aux',
            \       '%S:p:r.bbl',
            \       '%S:p:r.blg',
            \       '%S:p:r.dvi',
            \       '%S:p:r.fdb_latexmk',
            \       '%S:p:r.fls',
            \       '%S:p:r.synctex.gz',
            \       ],
            \   'exec' : '%c %o %a %s'
            \   },
            \ 'scheme' : {
            \   'command' : 'guile',
            \ },
            \ 'ocaml' : {
            \   'command' : 'ocaml',
            \ },
            \}
let g:quickrun_no_default_key_mappings = 1
nnoremap \r :cclose<CR>:QuickRun -mode n<CR>
xnoremap \r :<C-U>cclose<CR>gv:QuickRun -mode v<CR>
'''

[[plugins]]
repo = 'alpaca-tc/alpaca_tags'
hook_add = '''
let g:alpaca_tags#config = {
            \ '_' : '-R --sort=yes --languages=+Ruby --languages=-js,JavaScript',
            \ 'js' : '--languages=+js',
            \ '-js' : '--languages=-js,JavaScript',
            \ 'vim' : '--languages=+Vim,vim',
            \ 'php' : '--languages=+php',
            \ '-vim' : '--languages=-Vim,vim',
            \ '-style': '--languages=-css,scss,js,JavaScript,html',
            \ 'scss' : '--languages=+scss --languages=-css',
            \ 'css' : '--languages=+css',
            \ 'java' : '--languages=+java $JAVA_HOME/src',
            \ 'ruby': '--languages=+Ruby',
            \ 'coffee': '--languages=+coffee',
            \ '-coffee': '--languages=-coffee',
            \ 'bundle': '--languages=+Ruby',
            \ }
augroup AlpacaTags
    autocmd!
    autocmd BufWritePost Gemfile AlpacaTagsBundle
    autocmd BufEnter * AlpacaTagsSet
    autocmd BufWritePost * if isdirectory(glob(getcwd() . '/.git')) | AlpacaTagsUpdate -R | endif
augroup END
'''

