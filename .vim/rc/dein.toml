[[plugins]]
repo = 'roxma/nvim-yarp'
if   = '''! has('nvim')'''
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if   = '''! has('nvim')'''

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc'
build= 'make'

[[plugins]]
repo = 'Shougo/vimshell'

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
let g:neosnippet#snippets_directory=['~/.vim/snippets/', '~/.vim/bundle/vim-snippets/snippets/']
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'cookie-s/vim-polyglot'

[[plugins]]
repo = 'tpope/vim-eunuch'

[[plugins]]
repo = 'vim-scripts/matchit.zip'
[[plugins]]
repo = 'tpope/vim-sleuth'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='solarized_flood'
'''
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'altercation/vim-colors-solarized'
# colorscheme is in .vimrc

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
" https://qiita.com/hrsh7th@github/items/e405b4f4228e10a43201
let s:ignore_globs = ['.git', '.svn', 'node_modules']
call denite#custom#var('file/rec', 'command', [
    \ 'ag',
    \ '--follow',
    \ ] + map(deepcopy(s:ignore_globs), { k, v -> '--ignore=' . v }) + [
    \ '--nocolor',
    \ '--nogroup',
    \ '-g',
    \ ''
    \ ])
call denite#custom#source('file/rec', 'matchers', ['matcher/fuzzy'])
call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', s:ignore_globs)

" https://okayu-moka.hatenablog.com/entry/2018/11/03/135925
call denite#custom#var('grep', {
    \ 'command': ['ag'],
    \ 'default_opts': ['-i', '--vimgrep'],
    \ 'recursive_opts': [],
    \ 'pattern_opt': [],
    \ 'separator': ['--'],
    \ 'final_opts': [],
    \ })

" https://qiita.com/pocari/items/1b76c211d5555fa87834
nnoremap [denite] <Nop>
nmap ,u [denite]
nnoremap <silent> [denite]f  :<C-u>Denite file/rec -split=floating<CR>
nnoremap <silent> [denite]g  :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>
nnoremap <silent> [denite]r  :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>
nnoremap <silent> [denite]b :<C-u>Denite -buffer-name=buffer buffer<CR>

" official doc
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d       denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q       denite#do_map('quit')
  nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
endfunction
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_post_update = ':UpdateRemotePlugins'
hook_post_source = '''
nnoremap <silent> ,f :<C-u> Defx <CR>

autocmd FileType defx call s:defx_my_settings()

function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> t
  \ defx#do_action('open','tabnew')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('drop', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('drop', 'pedit')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction

call defx#custom#option('_', {
    \ 'winwidth': 40,
    \ 'split': 'vertical',
    \ 'direction': 'topleft',
    \ 'show_ignored_files': 1,
    \ 'buffer_name': 'exlorer',
    \ 'toggle': 1,
    \ 'resume': 1,
    \ 'columns': 'indent:git:icons:filename:mark',
    \ })

Defx
'''

[[plugins]]
repo = 'kristijanhusak/defx-git'


[[plugins]]
repo = 'tpope/vim-fugitive'
hook_post_source = '''
command Gpr ! gh pr create -w
autocmd VimEnter * if empty(expand('<amatch>'))|call FugitiveDetect(getcwd())|endif
'''

[[plugins]]
repo = 'junegunn/gv.vim'
depends = ['vim-fugitive']

[[plugins]]
repo = 'sodapopcan/vim-twiggy'
depends = ['vim-fugitive']

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_post_source = '''
let g:quickrun_config = {
            \ '_' : {
            \   'runner' : 'vimproc',
            \   'runner/vimproc/updatetime' : 60,
            \   'outputter' : 'error',
            \   'outputter/error/success' : 'buffer',
            \   'outputter/error/error' : 'quickfix',
            \   'outputter/buffer/split' : 'rightbelow 8',
            \   'outputter/buffer/close_on_empty' : 1,
            \ },
            \ 'tex' : {
            \   'command' : 'latexmk',
            \   'outputter' : 'error',
            \   'outputter/error/success' : 'null',
            \   'outputter/error/error' : 'quickfix',
            \   'srcfile' : expand("%"),
            \   'hook/sweep/files' : [
            \       '%S:p:r.aux',
            \       '%S:p:r.bbl',
            \       '%S:p:r.blg',
            \       '%S:p:r.dvi',
            \       '%S:p:r.fdb_latexmk',
            \       '%S:p:r.fls',
            \       '%S:p:r.synctex.gz',
            \       ],
            \   'exec' : '%c %o %a %s'
            \ },
            \ 'scheme' : {
            \   'command' : 'guile',
            \ },
            \ 'ocaml' : {
            \   'command' : 'ocaml',
            \ },
            \ 'rust' : {
            \   'exec' : 'cargo run',
            \ },
            \}
let g:quickrun_no_default_key_mappings = 1
nnoremap \r :cclose<CR>:QuickRun -mode n<CR>
xnoremap \r :<C-U>cclose<CR>gv:QuickRun -mode v<CR>
'''

[[plugins]]
repo = 'alpaca-tc/alpaca_tags'
depends = 'vimproc'
hook_add = '''
let g:alpaca_tags#config = {
            \ '_' : '-R --sort=yes --languages=+Ruby --languages=-js,JavaScript',
            \ 'js' : '--languages=+js',
            \ '-js' : '--languages=-js,JavaScript',
            \ 'vim' : '--languages=+Vim,vim',
            \ 'php' : '--languages=+php',
            \ '-vim' : '--languages=-Vim,vim',
            \ '-style': '--languages=-css,scss,js,JavaScript,html',
            \ 'scss' : '--languages=+scss --languages=-css',
            \ 'css' : '--languages=+css',
            \ 'java' : '--languages=+java $JAVA_HOME/src',
            \ 'ruby': '--languages=+Ruby',
            \ 'coffee': '--languages=+coffee',
            \ '-coffee': '--languages=-coffee',
            \ 'bundle': '--languages=+Ruby',
            \ }
augroup AlpacaTags
    autocmd!
    autocmd BufWritePost Gemfile AlpacaTagsBundle
    autocmd BufEnter * AlpacaTagsSet
    autocmd BufWritePost * if isdirectory(glob(system("git rev-parse --show-toplevel") . '/.git')) | AlpacaTagsUpdate -R | endif
augroup END
'''

[[plugins]]
repo = 'preservim/tagbar'
hook_add = '''
let g:tagbar_width = 40
nnoremap <silent> <leader>t :TagbarToggle<CR>
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_post_update = ':UpdateRemotePlugins'
hook_post_source = '''
let g:deoplete#enable_at_startup = 1

" <C-c>: popup cancel
inoremap <expr><C-c> deoplete#cancel_popup()

call deoplete#custom#option('candidate_marks', ['A', 'S', 'D', 'F', 'G'])
inoremap <expr><C-a> pumvisible() ? deoplete#insert_candidate(0) : 'A'
inoremap <expr><C-s> pumvisible() ? deoplete#insert_candidate(1) : 'S'
inoremap <expr><C-d> pumvisible() ? deoplete#insert_candidate(2) : 'D'
inoremap <expr><C-f> pumvisible() ? deoplete#insert_candidate(3) : 'F'
inoremap <expr><C-g> pumvisible() ? deoplete#insert_candidate(4) : 'G'

call deoplete#custom#source('_', 'matchers', ['matcher_fuzzy'])
call deoplete#custom#source('_', 'converters', [
        \ 'converter_remove_paren',
        \ 'converter_remove_overlap',
        \ 'matcher_length',
        \ 'converter_truncate_abbr',
        \ 'converter_truncate_menu',
        \ 'converter_auto_delimiter',
        \ ])

call deoplete#custom#option('keyword_patterns', {
        \ '_': '[a-zA-Z_]\k*',
        \ 'tex': '\\?[a-zA-Z_]\w*',
        \ 'ruby': '[a-zA-Z_]\w*[!?]?',
        \})
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 10000
    autocmd! BufWritePre *.rs,*.go,*.tf call execute('LspDocumentFormatSync')
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" https://github.com/prabirshrestha/vim-lsp/wiki/Servers-Rust
if executable('rls')
    augroup LspRLS
        au!
        au User lsp_setup call lsp#register_server({
            \ 'name': 'rls',
            \ 'cmd': {server_info->['rls']},
            \ 'workspace_config': {'rust': {'clippy_preference': 'on'}},
            \ 'allowlist': ['rust'],
            \ })
    augroup END
endif

augroup LspEFM
  au!
  au User lsp_setup call lsp#register_server({
    \ 'name': 'efm-langserver',
    \ 'cmd': {server_info->['efm-langserver']},
    \ 'allowlist': ['markdown'],
    \ })
augroup END
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'
