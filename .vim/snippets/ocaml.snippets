priority -50

snippet rs "raise" b
    raise (${1:Not_found})

snippet open "open"
    let open ${1:module} in
    ${2:e}

snippet try "try"
    try ${1:e}
    with ${2:Not_found} -> ${3:()}

snippet ref "ref"
    let ${1:name} = ref ${2:val} in
    ${3:e}

snippet matchl "pattern match on a list"
    match ${1:list} with
    | [] -> ${2:()}
    | x::xs -> ${3:()}

snippet matcho "pattern match on an option type"
    match ${1:x} with
    | Some(${2:y}) -> ${3:()}
    | None -> ${4:()}

snippet fun "anonymous function"
    (fun ${1:x} -> ${2:x})

snippet cc "commment"
    (* ${1:comment} *)

snippet let "let .. in binding"
    let ${1:x} = ${2:v} in
    ${3:e}

snippet lr "let rec"
    let rec ${1:f} =
        ${2:expr}

snippet if "if"
    if ${1:(* condition *)} then
        ${2:(* A *)}
    else
        ${3:(* B *)}

snippet If "If"
    if ${1:(* condition *)} then
        ${2:(* A *)}

snippet while "while"
    while ${1:(* condition *)} do
        ${2:(* A *)}
    done

snippet for "for"
    for ${1:i} = ${2:1} to ${3:10} do
        ${4:(* BODY *)}
    done

snippet match "match"
    match ${1:(* e1 *)} with
    | ${2:p} -> ${3:e2}

snippet Match "match"
    match ${1:(* e1 *)} with
    | ${2:p} -> ${3:e2}

snippet class "class"
    class ${1:name} = object
        ${2:methods}
    end

snippet obj "obj"
    object
        ${2:methods}
    end

snippet Obj "object"
    object (self)
        ${2:methods}
    end

snippet {{ "object functional update"
    {< ${1:x} = ${2:y} >}

snippet beg "beg"
    begin
        ${1:block}
    end

snippet ml "module instantiantion with functor"
    module ${1:Mod} = ${2:Functor}(${3:Arg})

snippet mod "module - no signature"
    module ${1:(* Name *)} = struct
        ${2:(* BODY *)}
    end

snippet Mod "module with signature"
    module ${1:(* Name *)} : ${2:(* SIG *)} = struct
        ${3:(* BODY *)}
    end

snippet sig "anonymous signature"
    sig
        ${2:(* BODY *)}
    end

snippet sigf "functor signature or anonymous functor"
    functor (${1:Arg} : ${2:ARG}) -> ${3:(* BODY *)}

snippet func "define functor - no signature"
    module ${1:M} (${2:Arg} : ${3:ARG}) = struct
        ${4:(* BODY *)}
    end

snippet Func "define functor - with signature"
    module ${1:M} (${2:Arg} : ${3:ARG}) : ${4:SIG} = struct
        ${5:(* BODY *)}
    end

snippet mot "Declare module signature"
    module type ${1:(* Name *)} = sig
        ${2:(* BODY *)}
    end

snippet module "Module with anonymous signature"
    module ${1:(* Name *)} : sig
        ${2:(* SIGNATURE *)}
    end = struct
        ${3:(* BODY *)}
    end

snippet oo "odoc"
    (** ${1:odoc} *)

snippet qt "inline qtest"
    (*$T ${1:name}
        ${2:test}
    *)


snippet assert "assert"
    assert( ${1} = ${2} );
    ${0}

